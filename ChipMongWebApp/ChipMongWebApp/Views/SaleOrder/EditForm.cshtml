@using ChipMongWebApp.Extension
@model ChipMongWebApp.Models.DTO.SaleOrder.SaleOrderViewDTO



<form id="saleorder" name="saleorder">
    @Html.HiddenFor(m => m.id)
    @Html.Hidden("deleteLineItemID", "0")

    <!-- SaleOrder Card -->
    <div class="card shadow-sm">
        <div class="card-header merienda"> SaleOrder </div>
        <!-- card body -->
        <div class="card-body">
            <!--row 1-->
            <div class="row">

                <div class="col-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.code)
                        @Html.TextBoxFor(m => m.code, new { @class = "form-control", @readonly = "readonly" })
                    </div>
                </div>

                <div class="col-4">
                    <div class="form-group">
                        @Html.Label("Date")
                        @Html.TextBoxFor(m => m.code, new { @class = "form-control" })
                    </div>
                </div>

                <div class="col-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.customerID)
                        <select id="customerID" class="form-control">
                            <option value="@Model.customerID" selected="selected"> @Model.customer.firstName @Model.customer.lastName </option>
                        </select>
                    </div>
                </div>

            </div>
            <!--end  row 1-->
            <!--row 2-->
            <div class="row">

                <div class="col-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.total)
                        @Html.TextBoxFor(m => m.total, new { @class = "form-control", @readonly = "readonly",  Value = Model.total.ToTwoDecimalPoint() })
                    </div>
                </div>

                <div class="col-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.status)
                        @Html.TextBoxFor(m => m.status, new { @class = "form-control" })
                    </div>
                </div>

                <div class="col-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.remarks)
                        @Html.TextAreaFor(m => m.remarks, new { @class = "form-control" })
                    </div>
                </div>

            </div>
            <!--end  row 2-->
        </div>
        <!--endcard body -->
    </div>
    <!-- end  SaleOrder Card -->
</form>


<br />

<div id="tableData" class="shadow-sm bg-white">
    <table class="table table-bordered table-striped table-hover">
        <thead>
            <tr class="text-center">
                <th scope="col"> Item </th>
                <th scope="col"> Quantity </th>
                <th scope="col"> Price </th>
                <th scope="col"> Total </th>
                <th scope="col" style="width:40px;"> </th>
                
            </tr>
        </thead>
        <tbody>
            @{
                int i = 1;
                foreach (var item in Model.items)
                {
            <tr rowIndex="@i">
                <input type="hidden" name="@("lineItemID"+i)" id="@("lineItemID"+i)" value="@item.id" />
                <td>
                    <select class="form-control line-item-required" id="item0" name="items[][itemID]" onchange="itemChange($(this))">
                        <option value=""> -- Please Select Item -- </option>
                        <option value="1"> Item 1 </option>
                        <option value="2"> Item 2 </option>
                        <option value="3"> Item 3 </option>
                        <option value="4"> Item 4 </option>
                    </select>
                </td>
                <td> <input class="form-control line-item-required" type="text" id="quantity0" name="items[][quantity]" placeholder="Quantity" value="@item.quantity.ToTwoDecimalPoint()" onchange="calculation($(this))" /> </td>
                <td> <input class="form-control line-item-required" type="text" id="price0" name="items[][price]" placeholder="Price" value="@item.price.ToTwoDecimalPoint()" onchange="calculation($(this))" /> </td>
                <td> <input class="form-control" type="text" id="total0" name="total0" value="@item.total.ToTwoDecimalPoint()" readonly /> </td>
                <td>
                    <button type="button" class="btn btn-danger" onclick="deleteLineItem($(this))"> <i class="fas fa-trash-alt"></i></button>
                </td>
            </tr>
                    i++;

                }
            }

        </tbody>
    </table>
</div>


<script>
    var ssaURL = "@Url.Content("~/customer/ssa")";
    var select2PlaceHolder = "Customer";
    $(document).ready(function () {
        // Set up the Select2 control
        $('#customerID').select2({
            ajax: {
                url: ssaURL,
                dataType: "json",
                data: function (params) {
                    return {
                        q: params.term, // search term
                        page: params.page
                    };
                }
            },
            placeholder: select2PlaceHolder,
            escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
            minimumInputLength: 1,
            templateResult: templateResult,
            templateSelection: templateSelection
            
        });
    });

    //-> templateResult
    function templateResult(data) {
        if (data.loading)
            return data.text;

        var markup = `<div class="row">
                            <div class="col-4"> ${data.firstName}  </div>
                            <div class="col-4"> ${data.lastName}  </div>
                            <div class="col-4"> ${data.code}  </div>
                        </div>`;
        return markup;
    }

    //-> templateSelection
    function templateSelection(data) {
        if (data.text != "") 
            return data.text;
        return data.firstName + " " + data.lastName;
    }

    //-> deleteLineItem
    function deleteLineItem(prop) {
        var rowIndex = prop.closest("tr").attr("rowIndex", rowIndex);
        console.log(rowIndex);
        //alert(rowIndex);
        //var deleteLineItemID = $("#deleteLineItemID").val();

        
        //deleteLineItemID = deleteLineItemID + "," + $("#lineItemID" + rowIndex).val();
        //$("#deleteLineItemID").val(deleteLineItemID);
        
        if (confirm("Do you to delete this line item?"))
            prop.closest("tr").remove();
    }

</script>










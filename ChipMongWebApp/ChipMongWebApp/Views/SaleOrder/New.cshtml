@using ChipMongWebApp.Helpers
@model ChipMongWebApp.Models.DTO.SaleOrder.SaleOrderViewDTO
@{
    /**/

    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/Main/_Main.cshtml";
}

<div class="card" id="action">
    <div class="card-body text-dark shadow-sm merienda">
        <button type="button" class="btn btn-success" id="btnSave"> <i class="fas fa-save"></i>  Save  </button>
        <button type="button" class="btn btn-danger" id="btnCancel"> <i class="fas fa-times"></i> Cancel  </button>
    </div>
</div>

<br />

<form id="record" name="record">
    @Html.AntiForgeryToken()
    <!-- card -->
    <div class="card shadow-sm">
        <div class="card-header merienda"> SaleOrder </div>

        <!-- card body -->
        <div class="card-body">

            <!--row 1-->
            <div class="row">
                <div class="col-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.code)
                        @Html.TextBoxFor(m => m.code, new { @class = "form-control", @readonly = "readonly", placeholder = "Code" })
                    </div>
                </div>

                <div class="col-4">
                    <div class="form-group">
                        @Html.Label("Date")
                        @Html.TextBoxFor(m => m.date, new { @class = "form-control", Value = DateTime.Now.ToString("dd/MM/yyyy") })
                    </div>
                </div>

                <div class="col-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.customerID)
                        @Html.DropDownListFor(m => m.customerID, new SelectList(Enumerable.Empty<SelectListItem>()), new { @class = "form-control required" })
                    </div>
                </div>

            </div>
            <!--end  row 1-->
            <!--row 2-->
            <div class="row">
                <div class="col-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.total)
                        @Html.TextBoxFor(m => m.total, new { @class = "form-control", @readonly = "readonly", placeholder = "Total", Value = "0.00" })
                    </div>
                </div>

                <div class="col-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.status)
                        @Html.DropDownListFor(m => m.status, SelectionHelper.SaleOrderStatus("New"), "-- Select Status --", new { @class = "form-control" })
                    </div>
                </div>

                <div class="col-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.remarks)
                        @Html.TextAreaFor(m => m.remarks, new { @class = "form-control", placeholder = "Remarks", @maxlength = "1000" })
                    </div>
                </div>

            </div>
            <!--end  row 2-->
        </div>
        <!-- end card body -->
    </div>
    <!-- end card -->

    <br />

    <!-- Line Item  -->
    <div class="bg-white">
        <table class="table table-bordered table-striped table-hover" id="tblLineItem">
            <thead>
                <tr class="text-center">
                    <th scope="col"> Item </th>
                    <th scope="col"> Quantity </th>
                    <th scope="col"> Price </th>
                    <th scope="col"> Total </th>
                    <th scope="col" style="width:40px;"> </th>
                </tr>
                <tr rowIndex="0">
                    <td>
                        @Html.DropDownList("items[][itemID]", SelectionHelper.ItemSelection(), " -- Select Item --",
                          new
                          {
                              @class = "form-control",
                              @id = "item0",
                              rowIndex = "0",
                              @onchange = "itemChange($(this))"
                          })
                    </td>

                    <td>
                        @Html.TextBox("items[][quantity]", null,
                new
                {
                    @class = "form-control line-item-required",
                    @id = "quantity0",
                    @placeholder = "Quantity",
                    @onchange = "calculation($(this))"
                })
                    </td>

                    <td>
                        @Html.TextBox("items[][price]", null,
                new
                {
                    @class = "form-control line-item-required",
                    @id = "price0",
                    @placeholder = "Price",
                    @onchange = "calculation($(this))"
                })
                    </td>

                    <td>
                        @Html.TextBox("total0", null,
                new
                {
                    @class = "form-control total text-right",
                    @id = "total0",
                    @placeholder = "Price",
                    @readonly = "readonly"
                })
                    </td>

                        <td>
                        <button type="button" class="btn btn-success" onclick="saveLineItem($(this))"> <i class="fas fa-save"></i></button>
                    </td>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>


</form>

<script src="~/Content/js/modules/SaleOrder.js"></script>

<script>

    var endPoint = "@Url.Content("~/saleorder")";
    var ssaURL = "@Url.Content("~/customer/ssa")";
    var select2PlaceHolder = "Customer";

    $(document).ready(function () {
        setupEvents();
    });

    //-> setupEvents
    function setupEvents() {
        $("#btnSave").click(function () { save(); });
        $("#btnCancel").click(function () { cancel(); });
        setupDatePicker("#date");
        customerSSA(ssaURL, select2PlaceHolder);
    }

    //-> save
    function save() {
        if ($("#customerID").val() == null)
            return $(".select2-selection").css("border-color", "red");

        if (isValid()) {
            $('#tblLineItem tr:last').remove();
            ajaxHelper(endPoint + "/new", $("#record").serializeObject(), requestMethod.POST).then(function (data) {
                window.location.href = endPoint + "/view/" + data.id;
            });
        }
    }

    //-> cancel
    function cancel() {
        window.location.href = endPoint + "/find";
    }

    //*** function for line item ***//

    //-> itemChange
    function itemChange(prop) {
        var index = prop.closest("tr").attr("rowIndex")
        var itemEndPoint = "@Url.Content("~/item")";
        var itemID = prop.val();
        ajaxHelper(itemEndPoint + "/record/" + itemID, null, requestMethod.GET).then(function (data) {
            $("#price" + index).val(toFloatWithTwoPrecision(data.price));
            calculation(prop);
        });
    }

    //-> calculation
    function calculation(prop) {
        var index = prop.closest("tr").attr("rowIndex")
        var quantity = toFloat($("#quantity" + index).val());
        var price = toFloat($("#price" + index).val());
        var total = quantity * price;
        $("#total" + index).val(toFloatWithTwoPrecision(total));
        if (index > 0)
            headerCalculation()
    }

</script>


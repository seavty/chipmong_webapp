@using ChipMongWebApp.Utils.Helpers
@model ChipMongWebApp.Models.DTO.User.UserCredentialDTO

@{
    /**/

    /**/

    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/Basic/_Basic.cshtml";
}

<div class="container" id="dvLogin" style="padding:200px;">

    <form name="login" id="login">
        @Html.AntiForgeryToken()
        <!-- log in -->
        <div class="card shadow-sm">
            <div class="card-header merienda"> Login </div>

            <div class="card-body">
                <div class="form-group">
                    @Html.LabelFor(m => m.userName)
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroupPrepend"> <i class="fas fa-user"></i> </span>
                        </div>
                        @Html.TextBoxFor(m => m.userName, new { @class = "form-control required", placeholder = "User Name", @maxlength = "30" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.password)
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroupPrepend"> <i class="fas fa-unlock-alt"></i> </span>
                        </div>
                        @Html.PasswordFor(m => m.password, new { @class = "form-control required", placeholder = "Password", @maxlength = "30" })
                    </div>
                </div>

                <div class="form-group">
                    <button type="button" class="btn btn-primary merienda" id="btnLogin" onclick="handleLogin()"> <i class="fas fa-sign-in-alt"></i> Login </button>
                    <label id="lblMsg" class="text-danger"> </label>
                </div>
            </div>
        </div>
        <!-- end log in -->
    </form>
</div>

<input type="hidden" name="baseURL" id="baseURL" value="@Request.Url.GetLeftPart(UriPartial.Authority)" />

<script>

    if ('@ViewContext.RouteData.Values["id"]' == -1)
        alert("Session expired, please login again!");

    const controller = "@Url.Content($"~/{@ConstantHelper.AUTH_CONTROLLER}")";
    //alert(controller);
    $(document).ready(() =>{
        $("form").keypress((e) => {
            const code = e.keyCode || e.which;
            if (code === 13) {
                handleLogin();
            }
        });
    });

    //-> handleSubmit
    const handleLogin = () => {
        if (isValid()) {
            $('#loadingIndicator').modal({
                keyboard: false,
                backdrop: "static"
            });
            const promise = new Promise((resolve, reject) => {
                window.setTimeout(() => {
                    $.ajax({
                        url: "@Url.Content("~/auth/login")",
                        data: $("#login").serialize(),
                        type: requestMethod.POST,
                        async: false,
                        error: (jqXHR, textStatus, errorThrown) => {
                            if (jqXHR.status == 404)
                                $("#lblMsg").text("Incorrect user name or password")
                            else
                                alert("Error code: " + jqXHR.status + "; Message: error occured while processing your request.");

                            $('#loadingIndicator').modal("hide");
                            return;
                        },
                        beforeSend: () => {},
                        success: (data) => {
                            $('#loadingIndicator').modal("hide");
                            if (data == "ok")
                                window.location.href = "@Url.Content($"~/{ConstantHelper.CUSTOMER_CONTROLLER}/find")";
                            else
                                alert("Error");
                        }
                    });
                }, 100);
            });
            return promise;
        }
    }

</script>

